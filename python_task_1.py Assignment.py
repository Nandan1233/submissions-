{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30615,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\n\ndef generate_car_matrix(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Creates a DataFrame for id combinations.\n\n    Args:\n        df (pandas.DataFrame)\n\n    Returns:\n        pandas.DataFrame: Matrix generated with 'car' values,\n                          where 'id_1' and 'id_2' are used as indices and columns respectively.\n    \"\"\"\n    # Pivot the DataFrame to create the matrix\n    matrix_df = df.pivot(index='id_1', columns='id_2', values='car').fillna(0)\n\n    # Fill diagonal values with 0\n    matrix_df.values[[range(len(matrix_df))]*2] = 0\n\n    return matrix_df\n\n\ndef get_type_count(df):\n    \"\"\"\n    Categorizes 'car' values into types and returns a dictionary of counts.\n\n    Args:\n        df (pandas.DataFrame)\n\n    Returns:\n        dict: A dictionary with car types as keys and their counts as values.\n    \"\"\"\n    # Create a new categorical column 'car_type' based on specified conditions\n    df['car_type'] = pd.cut(df['car'], bins=[-float('inf'), 15, 25, float('inf')], labels=['low', 'medium', 'high'])\n\n    # Calculate count of occurrences for each car_type category\n    type_counts = df['car_type'].value_counts().to_dict()\n\n    # Sort the dictionary alphabetically based on keys\n    sorted_type_counts = dict(sorted(type_counts.items()))\n\n    return sorted_type_counts\n\n\n\ndef get_bus_indexes(df):\n    \"\"\"\n    Returns the indexes where the 'bus' values are greater than twice the mean.\n\n    Args:\n        df (pandas.DataFrame)\n\n    Returns:\n        list: List of indexes where 'bus' values exceed twice the mean.\n    \"\"\"\n    # Calculate the mean of the 'bus' column\n    bus_mean = df['bus'].mean()\n\n    # Identify and return the indices where 'bus' values are greater than twice the mean\n    bus_indexes = df[df['bus'] > 2 * bus_mean].index.tolist()\n\n    return sorted(bus_indexes)\n\n\ndef filter_routes(df):\n    \"\"\"\n    Filters and returns routes with average 'truck' values greater than 7.\n\n    Args:\n        df (pandas.DataFrame)\n\n    Returns:\n        list: List of route names with average 'truck' values greater than 7.\n    \"\"\"\n    # Group by 'route' and calculate the average 'truck' value for each route\n    route_avg_truck = df.groupby('route')['truck'].mean()\n\n    # Filter routes where the average 'truck' value is greater than 7\n    filtered_routes = route_avg_truck[route_avg_truck > 7].index.tolist()\n\n    return sorted(filtered_routes)\n\n\ndef multiply_matrix(matrix):\n    \"\"\"\n    Multiplies matrix values with custom conditions.\n\n    Args:\n        matrix (pandas.DataFrame)\n\n    Returns:\n        pandas.DataFrame: Modified matrix with values multiplied based on custom conditions.\n    \"\"\"\n    # Apply custom conditions to multiply matrix values\n    modified_matrix = matrix.applymap(lambda x: x * 0.75 if x > 20 else x * 1.25)\n\n    # Round values to 1 decimal place\n    modified_matrix = modified_matrix.round(1)\n\n    return modified_matrix\n\n\nimport pandas as pd\n\ndef time_check(df):\n    \"\"\"\n    Use shared dataset-2 to verify the completeness of the data by checking whether the timestamps for each unique (`id`, `id_2`) pair cover a full 24-hour and 7 days period.\n\n    Args:\n        df (pandas.DataFrame)\n\n    Returns:\n        pd.Series: return a boolean series\n    \"\"\"\n    # Combine 'startDay' and 'startTime' columns to create a datetime column\n    df['start_datetime'] = pd.to_datetime(df['startDay'] + ' ' + df['startTime'])\n\n    # Combine 'endDay' and 'endTime' columns to create a datetime column\n    df['end_datetime'] = pd.to_datetime(df['endDay'] + ' ' + df['endTime'])\n\n    # Calculate the duration of each timestamp pair\n    df['duration'] = df['end_datetime'] - df['start_datetime']\n\n    # Check if each pair covers a full 24-hour period and spans all 7 days\n    completeness_check = (\n        (df['duration'] == pd.Timedelta(days=1)) &  # Check for 24-hour period\n        (df['start_datetime'].dt.day_name() == 'Monday') &  # Check for Monday start\n        (df['end_datetime'].dt.day_name() == 'Sunday')  # Check for Sunday end\n    )\n\n    return completeness_check\n\n","metadata":{"_uuid":"3ffbecf8-e2a1-4cf5-9f42-d7547f13182c","_cell_guid":"05d48883-70a2-430a-ae61-e4298d2e2b98","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":5,"outputs":[]}]}