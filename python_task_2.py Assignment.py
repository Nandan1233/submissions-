{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30615,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"def calculate_distance_matrix(df):\n    \"\"\"\n    Calculate a distance matrix based on the dataframe, df.\n\n    Args:\n        df (pandas.DataFrame)\n\n    Returns:\n        pandas.DataFrame: Distance matrix\n    \"\"\"\n    # Assuming the dataframe has columns 'id_start', 'id_end', and 'distance'\n    distance_matrix = df.pivot(index='id_start', columns='id_end', values='distance').fillna(0)\n\n    # Make the matrix symmetric by filling missing values with transposed values\n    distance_matrix = distance_matrix.add(distance_matrix.T, fill_value=0)\n\n    # Set diagonal values to 0\n    distance_matrix.values[[range(len(distance_matrix))]*2] = 0\n\n    return distance_matrix\n\n\n\ndef unroll_distance_matrix(df):\n    \"\"\"\n    Unroll a distance matrix to a DataFrame in the style of the initial dataset.\n\n    Args:\n        df (pandas.DataFrame)\n\n    Returns:\n        pandas.DataFrame: Unrolled DataFrame containing columns 'id_start', 'id_end', and 'distance'.\n    \"\"\"\n    # Extract 'id_start', 'id_end', and 'distance' columns from the upper triangle of the distance matrix\n    unrolled_df = pd.DataFrame(np.triu(df.values), columns=df.columns)\n\n    # Melt the DataFrame to the desired format\n    unrolled_df = unrolled_df.melt(id_vars='id_start', var_name='id_end', value_name='distance')\n\n    # Filter out rows where 'id_start' is equal to 'id_end'\n    unrolled_df = unrolled_df[unrolled_df['id_start'] != unrolled_df['id_end']]\n\n    return unrolled_df\n\n\n\ndef find_ids_within_ten_percentage_threshold(df, reference_id):\n    \"\"\"\n    Find all IDs whose average distance lies within 10% of the average distance of the reference ID.\n\n    Args:\n        df (pandas.DataFrame)\n        reference_id (int)\n\n    Returns:\n        pandas.DataFrame: DataFrame with IDs whose average distance is within the specified percentage threshold\n                          of the reference ID's average distance.\n    \"\"\"\n    # Calculate average distance for the reference value\n    reference_avg_distance = df[df['id_start'] == reference_id]['distance'].mean()\n\n    # Calculate the percentage threshold\n    threshold = 0.1 * reference_avg_distance\n\n    # Filter IDs within the specified percentage threshold\n    result_df = df.groupby('id_start')['distance'].mean().reset_index()\n    result_df = result_df[(result_df['distance'] >= reference_avg_distance - threshold) &\n                          (result_df['distance'] <= reference_avg_distance + threshold)]\n\n    return result_df\n\n\n\ndef calculate_toll_rate(df):\n    \"\"\"\n    Calculate toll rates for each vehicle type based on the unrolled DataFrame.\n\n    Args:\n        df (pandas.DataFrame)\n\n    Returns:\n        pandas.DataFrame\n    \"\"\"\n    # Add rate coefficients for each vehicle type\n    rate_coefficients = {'moto': 0.8, 'car': 1.2, 'rv': 1.5, 'bus': 2.2, 'truck': 3.6}\n\n    # Multiply the 'distance' column by the corresponding rate coefficient for each vehicle type\n    for vehicle_type, coefficient in rate_coefficients.items():\n        df[vehicle_type] = df['distance'] * coefficient\n\n    return df\n\n\n\ndef calculate_time_based_toll_rates(df):\n    \"\"\"\n    Calculate time-based toll rates for different time intervals within a day.\n\n    Args:\n        df (pandas.DataFrame)\n\n    Returns:\n        pandas.DataFrame\n    \"\"\"\n    # Create a time-based discount factor column based on the specified time ranges\n    df['discount_factor'] = np.where(\n        ((df['start_day'].isin(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'])) &\n         (df['start_time'] >= pd.to_datetime('00:00:00').time()) & (df['start_time'] < pd.to_datetime('10:00:00').time())) |\n        ((df['start_day'].isin(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'])) &\n         (df['start_time'] >= pd.to_datetime('10:00:00').time()) & (df['start_time'] < pd.to_datetime('18:00:00').time())) |\n        ((df['start_day'].isin(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'])) &\n         (df['start_time'] >= pd.to_datetime('18:00:00').time())),\n        0.8,  # Weekdays discount factor 0.8\n        0.7   # Weekends discount factor 0.7\n    )\n\n    # Multiply the distance by the discount factor for each vehicle type\n    for vehicle_type in ['moto', 'car', 'rv', 'bus', 'truck']:\n        df[vehicle_type] = df[vehicle_type] * df['discount_factor']\n\n    return df\n\n\n\n","metadata":{"_uuid":"3ffbecf8-e2a1-4cf5-9f42-d7547f13182c","_cell_guid":"05d48883-70a2-430a-ae61-e4298d2e2b98","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":6,"outputs":[{"traceback":["\u001b[0;36m  Cell \u001b[0;32mIn[6], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    def calculate_distance_matrix(df):\u001b[0m\n\u001b[0m                                      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m incomplete input\n"],"ename":"SyntaxError","evalue":"incomplete input (1574797744.py, line 1)","output_type":"error"}]}]}